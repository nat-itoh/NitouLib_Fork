@startuml

package CommonModule {

    ' インベントリに格納されるアイテム
    interface IInventoryItem{
        + string Name
    }

    abstract class Inventory<T> {
        - List<T> items
        + void AddItem(T item)
        + void RemoveItem(T item)
        + List<InventoryItem<T>> GetItemsByCategory(ItemCategory category)
    }


    abstract class InventoryItem<T> {
        + T Data
        + ItemCategory Category
    }

    interface IInventoryChangeNotifier<T> {
        + OnItemAdded(): IObservable<T>
        + OnItemRemoved(): IObservable<T>
    }


    class ReactiveInventory<T> {
        + IObservable<T> OnItemAdded
        + IObservable<T> OnItemRemoved
    }

    enum ItemCategory {
        Weapon
        Shield
        Consumable
        Other
    }
}

Inventory "1"-->"n" IInventoryItem : <<composition>>



package ProjectSpecificModule {
    abstract class ItemCommand<T> {
        + void Execute(InventoryItem<T> item)
    }

    class EquipCommand<T> {
        + void Execute(InventoryItem<T> item)
    }

    class DiscardCommand<T> {
        + void Execute(InventoryItem<T> item)
    }

    class InventoryUI<T> {
        + void DisplayInventory(List<InventoryItem<T>> items)
        + void OnItemSelected(InventoryItem<T> item)
    }

    class InventorySelectionManager<T> {
        - InventoryItem<T> selectedItem
        + void SelectItem(InventoryItem<T> item)
        + InventoryItem<T> GetSelectedItem()
    }
}


ReactiveInventory -up-|> Inventory
ReactiveInventory .up.|> IInventoryChangeNotifier


InventoryItem --> ItemCategory
InventoryUI --> Inventory
InventorySelectionManager --> InventoryItem
EquipCommand -up-|> ItemCommand
DiscardCommand -up-|> ItemCommand

@enduml
